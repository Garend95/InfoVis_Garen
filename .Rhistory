setwd("~/")
read.csv("Waste_tons_by_class.csv", stringsAsFactors = F)
x <- read.csv("Waste_tons_by_class.csv", stringsAsFactors = F)
View(x)
a <- read.csv("Waste_tons_by_class.csv", stringsAsFactors = F)
a <- read.csv("Waste_tons_by_class.csv", stringsAsFactors = F)
b <- read.csv("Waste_tons_by_region.csv", stringsAsFactors = F)
c <- read.csv("Waste_quant_over_time_by_region.csv", stringsAsFactors = F)
d <- read.csv("Quantitative_specific_indicators_of_waste_by_region.csv", stringsAsFactors = F)
View(a)
View(b)
b <- head(b, n = 11)
View(c)
c <- head(b, c = 11)
c <- read.csv("Waste_quant_over_time_by_region.csv", stringsAsFactors = F)
View(c)
c <- head(c, n = 11)
View(d)
colnames(c[1,1])
colnames(c[,1])
colnames(c)
c <- read.csv("Waste_quant_over_time_by_region.csv", stringsAsFactors = F)
View(c)
library(ggplot2)
ggplot(data = c, aes(x = Year, y = Quantity)) + ggline()
library(ggplot2)
ggplot(data = c, aes(x = Year, y = Quantity)) + geom_area()
dat <- dat[c("Syunik"),]
dat <- c[c("Syunik"),]
View(dat)
dat <- which(data[,1] = "Syunik")
dat <- which(data[,1] == "Syunik")
?which
dat <- which(c[,1] == "Syunik")
dat <- c[c(which(c[,1] == "Syunik")),]
View(dat)
ggplot(dat = c, aes(x = Year, y = Quantity)) + geom_area()
dat <- c[c(which(c[,1] == "Syunik")),]
ggplot(data = dat, aes(x = Year, y = Quantity)) + geom_area()
ggplot(data = dat, aes(x = Year, y = Quantity)) + geom_line()
typeof(dat[1,])
typeof(dat[,1])
typeof(dat[,2])
dat[,2] <- as.numeric(dat[,2])
View(dat)
ggplot(data = dat, aes(x = Year, y = Quantity)) + geom_line()
ggplot(data = dat, aes(x = Year, y = Quantity)) + geom_line() +ggtitle("Waste by quantity in Syunik")
library(shiny)
# Define server logic ----
server <- function(input, output) {
}
# Run the app ----
shinyApp(ui = ui, server = server)
library(shiny)
# Define server logic ----
server <- function(input, output) {
}
ui <- fluidPage(
titlePanel("My Star Wars App"),
sidebarLayout(
sidebarPanel(),
mainPanel(
h6("Episode IV", align = "center"),
h6("A NEW HOPE", align = "center"),
h5("It is a period of civil war.", align = "center"),
h4("Rebel spaceships, striking", align = "center"),
h3("from a hidden base, have won", align = "center"),
h2("their first victory against the", align = "center"),
h1("evil Galactic Empire.")
)
)
)
shinyApp(ui = ui, server = server)
ui <- fluidPage(theme = shinytheme("cyborg"),
titlePanel("Basic widgets"),
#Rows & Columns 12 seperate spaces - bootstrap framework
fluidRow(
column(3,
h3("Buttons"),
actionButton("action", "Action"),
br(),
br(),
submitButton("Submit")),
column(3,
h3("Single checkbox"),
checkboxInput("checkbox", "Choice A", value = TRUE)),
column(3,
checkboxGroupInput("checkGroup",
h3("Checkbox group"),
choices = list("Choice 1" = 1,
"Choice 2" = 2,
"Choice 3" = 3),
selected = 1)),
column(3,
dateInput("date",
h3("Date input"),
value = "2014-01-01"))
),
fluidRow(
column(3,
dateRangeInput("dates", h3("Date range"))),
column(3,
fileInput("file", h3("File input"))),
column(3,
h3("Help text"),
helpText("Note: help text isn't a true widget,",
"but it provides an easy way to add text to",
"accompany other widgets.")),
column(3,
numericInput("num",
h3("Numeric input"),
value = 1))
),
fluidRow(
column(3,
radioButtons("radio", h3("Radio buttons"),
choices = list("Choice 1" = 1, "Choice 2" = 2,
"Choice 3" = 3),selected = 1)),
column(3,
selectInput("select", h3("Select box"),
choices = list("Choice 1" = 1, "Choice 2" = 2,
"Choice 3" = 3), selected = 1)),
column(3,
sliderInput("slider1", h3("Sliders"),
min = 0, max = 100, value = 50),
sliderInput("slider2", "",
min = 0, max = 100, value = c(25, 75))
),
column(3,
textInput("text", h3("Text input"),
value = "Enter text..."))
)
)
ui <- fluidPage(
titlePanel("Basic widgets"),
#Rows & Columns 12 seperate spaces - bootstrap framework
fluidRow(
column(3,
h3("Buttons"),
actionButton("action", "Action"),
br(),
br(),
submitButton("Submit")),
column(3,
h3("Single checkbox"),
checkboxInput("checkbox", "Choice A", value = TRUE)),
column(3,
checkboxGroupInput("checkGroup",
h3("Checkbox group"),
choices = list("Choice 1" = 1,
"Choice 2" = 2,
"Choice 3" = 3),
selected = 1)),
column(3,
dateInput("date",
h3("Date input"),
value = "2014-01-01"))
),
fluidRow(
column(3,
dateRangeInput("dates", h3("Date range"))),
column(3,
fileInput("file", h3("File input"))),
column(3,
h3("Help text"),
helpText("Note: help text isn't a true widget,",
"but it provides an easy way to add text to",
"accompany other widgets.")),
column(3,
numericInput("num",
h3("Numeric input"),
value = 1))
),
fluidRow(
column(3,
radioButtons("radio", h3("Radio buttons"),
choices = list("Choice 1" = 1, "Choice 2" = 2,
"Choice 3" = 3),selected = 1)),
column(3,
selectInput("select", h3("Select box"),
choices = list("Choice 1" = 1, "Choice 2" = 2,
"Choice 3" = 3), selected = 1)),
column(3,
sliderInput("slider1", h3("Sliders"),
min = 0, max = 100, value = 50),
sliderInput("slider2", "",
min = 0, max = 100, value = c(25, 75))
),
column(3,
textInput("text", h3("Text input"),
value = "Enter text..."))
)
)
# Run the app ----
shinyApp(ui = ui, server = server)
ui <- fluidPage(
titlePanel("Application Title"),
navlistPanel(
"Header A",
tabPanel("Component 1"),
tabPanel("Component 2"),
"Header B",
tabPanel("Component 3"),
tabPanel("Component 4"),
"-----",
tabPanel("Component 5")
)
)
# Run the app ----
shinyApp(ui = ui, server = server)
ui <- navbarPage("My Application",
tabPanel("Component 1"),
tabPanel("Component 2"),
navbarMenu("More",
tabPanel("Sub-Component A"),
tabPanel("Sub-Component B"))
)
# Run the app ----
shinyApp(ui = ui, server = server)
ui <- navbarPage("Waste Management in Armenia",
tabPanel("Summary"),
tabPanel("Data tables"),
navbarMenu("More",
tabPanel("Sub-Component A"),
tabPanel("Sub-Component B"))
)
# Run the app ----
shinyApp(ui = ui, server = server)
ui <- navbarPage("Waste Management in Armenia",
tabPanel("Summary"),
tabPanel("Data tables"),
navlistPanel(
"Header A",
tabPanel("Component 1"),
tabPanel("Component 2"),
"Header B",
tabPanel("Component 3"),
tabPanel("Component 4"),
"-----",
tabPanel("Component 5")
)
)
# Run the app ----
shinyApp(ui = ui, server = server)
e <- getURL("https://raw.githubusercontent.com/Garend95/InfoVis_Garen/master/Waste_quantity_indicators_and_transportation_2017.csv")
waste_transported2017 <- read.csv(text = e)
waste_transported2017$Region <- gsub ("\\n","",waste_transported2017$Region)
waste_transported2017$Year <- as.numeric(waste_transported2017$Year)
library(RCurl)
e <- getURL("https://raw.githubusercontent.com/Garend95/InfoVis_Garen/master/Waste_quantity_indicators_and_transportation_2017.csv")
waste_transported2017 <- read.csv(text = e)
waste_transported2017$Region <- gsub ("\\n","",waste_transported2017$Region)
waste_transported2017$Year <- as.numeric(waste_transported2017$Year)
library(DT)
ui <- dashboardPage(
dashboardHeader(title = "Waste management in Armenia"),
dashboardSidebar(
sidebarMenu(
id = "tabs",
menuItem("Overview", tabName = "overview", icon = icon("dashboard")),
menuItem("Tables", tabName = "tables", icon = icon("table")),
sliderInput("year_slider", h4("Choose year range"), min = 2013, max = 2017, value = c(2013,2017), step = NULL, round = FALSE),
textInput("Years to exclude", "Type year to exclude"),
checkboxGroupInput("region", "Select Region",
choices = list("All Regions" = 1,
"Aragatsotn" = 2,
"Ararat" = 3,
"Armavir" = 4,
"Gegharkunik" = 5,
"Lori" = 6,
"Kotayk" = 7,
"Shirak" = 8,
"Syunik" = 9,
"Vayots Dzor" = 10,
"Yerevan city" = 11))
)
),
dashboardBody(
tabItems(
tabItem(tabName = "overview",
fluidPage(
fluidRow(
column(3, h4("Test")),
column(5, h4("Bar Chart"))
),
fluidRow(
column(3, infoBox("Testing stuff", 20, icon = icon("credit-card"), fill = TRUE)),
column(5, h4("Time-Bound info"))
)
)
),
tabItem(tabName = "tables",
fluidPage(
fluidRow(
tabBox(
title = "First tabBox",
# The id lets us use input$tabset1 on the server to find the current tab
id = "tabset1",
tabPanel("Tab1", datatable(waste_transported2017)),
tabPanel("Tab2", "Tab content 2")
)
)
)
)
)
)
)
shinyApp(ui = ui, server = server)
#install.packages("DT")
#install.packages("shinythemes")
#install.packages("intrval")
library(shiny)
ui <- dashboardPage(
dashboardHeader(title = "Waste management in Armenia"),
dashboardSidebar(
sidebarMenu(
id = "tabs",
menuItem("Overview", tabName = "overview", icon = icon("dashboard")),
menuItem("Tables", tabName = "tables", icon = icon("table")),
sliderInput("year_slider", h4("Choose year range"), min = 2013, max = 2017, value = c(2013,2017), step = NULL, round = FALSE),
textInput("Years to exclude", "Type year to exclude"),
checkboxGroupInput("region", "Select Region",
choices = list("All Regions" = 1,
"Aragatsotn" = 2,
"Ararat" = 3,
"Armavir" = 4,
"Gegharkunik" = 5,
"Lori" = 6,
"Kotayk" = 7,
"Shirak" = 8,
"Syunik" = 9,
"Vayots Dzor" = 10,
"Yerevan city" = 11))
)
),
dashboardBody(
tabItems(
tabItem(tabName = "overview",
fluidPage(
fluidRow(
column(3, h4("Test")),
column(5, h4("Bar Chart"))
),
fluidRow(
column(3, infoBox("Testing stuff", 20, icon = icon("credit-card"), fill = TRUE)),
column(5, h4("Time-Bound info"))
)
)
),
tabItem(tabName = "tables",
fluidPage(
fluidRow(
tabBox(
title = "First tabBox",
# The id lets us use input$tabset1 on the server to find the current tab
id = "tabset1",
tabPanel("Tab1", datatable(waste_transported2017)),
tabPanel("Tab2", "Tab content 2")
)
)
)
)
)
)
)
shinyApp(ui = ui, server = server)
server <- function(input, output) {
}
ui <- dashboardPage(
dashboardHeader(title = "Waste management in Armenia"),
dashboardSidebar(
sidebarMenu(
id = "tabs",
menuItem("Overview", tabName = "overview", icon = icon("dashboard")),
menuItem("Tables", tabName = "tables", icon = icon("table")),
sliderInput("year_slider", h4("Choose year range"), min = 2013, max = 2017, value = c(2013,2017), step = NULL, round = FALSE),
textInput("Years to exclude", "Type year to exclude"),
checkboxGroupInput("region", "Select Region",
choices = list("All Regions" = 1,
"Aragatsotn" = 2,
"Ararat" = 3,
"Armavir" = 4,
"Gegharkunik" = 5,
"Lori" = 6,
"Kotayk" = 7,
"Shirak" = 8,
"Syunik" = 9,
"Vayots Dzor" = 10,
"Yerevan city" = 11))
)
),
dashboardBody(
tabItems(
tabItem(tabName = "overview",
fluidPage(
fluidRow(
column(3, h4("Test")),
column(5, h4("Bar Chart"))
),
fluidRow(
column(3, infoBox("Testing stuff", 20, icon = icon("credit-card"), fill = TRUE)),
column(5, h4("Time-Bound info"))
)
)
),
tabItem(tabName = "tables",
fluidPage(
fluidRow(
tabBox(
title = "First tabBox",
# The id lets us use input$tabset1 on the server to find the current tab
id = "tabset1",
tabPanel("Tab1", datatable(waste_transported2017)),
tabPanel("Tab2", "Tab content 2")
)
)
)
)
)
)
)
shinyApp(ui = ui, server = server)
library(shiny)
library(DT)
library(shinythemes)
library(intrval)
#install.packages("shinydashboard")
library("shinydashboard")
ui <- dashboardPage(
dashboardHeader(title = "Waste management in Armenia"),
dashboardSidebar(
sidebarMenu(
id = "tabs",
menuItem("Overview", tabName = "overview", icon = icon("dashboard")),
menuItem("Tables", tabName = "tables", icon = icon("table")),
sliderInput("year_slider", h4("Choose year range"), min = 2013, max = 2017, value = c(2013,2017), step = NULL, round = FALSE),
textInput("Years to exclude", "Type year to exclude"),
checkboxGroupInput("region", "Select Region",
choices = list("All Regions" = 1,
"Aragatsotn" = 2,
"Ararat" = 3,
"Armavir" = 4,
"Gegharkunik" = 5,
"Lori" = 6,
"Kotayk" = 7,
"Shirak" = 8,
"Syunik" = 9,
"Vayots Dzor" = 10,
"Yerevan city" = 11))
)
),
dashboardBody(
tabItems(
tabItem(tabName = "overview",
fluidPage(
fluidRow(
column(3, h4("Test")),
column(5, h4("Bar Chart"))
),
fluidRow(
column(3, infoBox("Testing stuff", 20, icon = icon("credit-card"), fill = TRUE)),
column(5, h4("Time-Bound info"))
)
)
),
tabItem(tabName = "tables",
fluidPage(
fluidRow(
tabBox(
title = "First tabBox",
# The id lets us use input$tabset1 on the server to find the current tab
id = "tabset1",
tabPanel("Tab1", datatable(waste_transported2017)),
tabPanel("Tab2", "Tab content 2")
)
)
)
)
)
)
)
shinyApp(ui = ui, server = server)
runApp('C:/Users/garen/Desktop/GitHub/InfoVis_Garen/Waste_UI2.R')
f <- getURL("https://raw.githubusercontent.com/Garend95/InfoVis_Garen/master/Waste_transported_to_municipal_landfills2017.csv")
waste_transported_to_landfiils <- read.csv(text = f)
waste_transported_to_landfiils$Region <- gsub ("\\n","",waste_transported_to_landfiils$Region)
waste_transported_to_landfiils$Year <- as.numeric(waste_transported_to_landfiils$Year)
f <- getURL("https://raw.githubusercontent.com/Garend95/InfoVis_Garen/master/Waste_transported_to_municipal_landfills2017.csv")
waste_transported_to_landfiils <- read.csv(text = f)
View(waste_transported_to_landfiils)
f <- getURL("https://raw.githubusercontent.com/Garend95/InfoVis_Garen/master/Waste_transported_to_municipal_landfills2017.csv")
waste_transported_to_landfiils <- read.csv(text = f)
waste_transported_to_landfiils$Region <- gsub ("\\n","",waste_transported_to_landfiils$Region)
View(waste_transported2017)
setwd("C:/Users/garen/Desktop/GitHub/InfoVis_Garen")
m <- read.csv("test.csv")
View(m)
z <- getURL("https://github.com/Garend95/InfoVis_Garen/blob/master/Waste_quantitative_movement_by_classes2017.csv")
waste_quantative_movement_by_classes_2017 <- read.csv(text = z)
z <- getURL("https://github.com/Garend95/InfoVis_Garen/blob/master/Waste_quantitative_movement_by_classes2017.csv")
y <- getURL("https://raw.githubusercontent.com/Garend95/InfoVis_Garen/master/Quantitative_indicators2017.csv")
quantative_indicators_2017 <- read.csv(text = y)
View(quantative_indicators_2017)
x <- getURL("https://raw.githubusercontent.com/Garend95/InfoVis_Garen/master/Movement_of_industrial_waste2017%20(3).csv")
waste_mnovement_2017 <- read.csv(text = x)
View(waste_mnovement_2017)
View(test)
m <- read.csv("test and check.csv")
View(m)
View(waste_transported_to_landfiils)
View(waste_transported_to_landfiils)
View(waste_transported2017)
